#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('project:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



//============================================= SOCKET SERVER =====================================================
// var server = require('http').createServer(app).listen(app.get('port'), function () {
//   console.log("--> PORT: " + app.get('port'));
// });

var ip = require('ip')
var io = require('socket.io')(server);					  //#Phải khởi tạo io sau khi tạo app!
console.log("--> Địa chỉ server: " + ip.address())
var mositureController = require('../controllers/mositureController')


//Namespace là Server
var device = io.on('connection', function (socket) {

  console.log("--> Connected - Device: " + socket.id); //In ra màn hình console là đã có một Socket Client kết nối thành công.

  //lấy dữ liệu độ ẩm
  socket.on('resMositure', function (data) {
    var moment = require('moment');
    //Nhận được thì in ra thôi hihi.
    console.log(data);
    mositureController.addMositure(new Date(), data.mositure);
    socketServer.emit('getMositure', { date: new Date(), date_formatted: moment(new Date).format("HH:mm:ss DD/MM/YYYY"), value: data.mositure });
  })

  // var loop = setInterval(function () {
  //   socket.emit('getMosi', { msg: "null" });
  //   console.log('Gửi request')
  // }, 1000)
  //Khi socket client bị mất kết nối thì chạy hàm sau.
  socket.on('disconnect', function () {
    console.log("--> Disconnected - Device: " + socket.id) 	//in ra màn hình console cho vui
  })
});


//Namespace là Server
var socketServer = io.of('/server')
  .on('connection', function (socket) {
    console.log("--> Connected - Server: " + socket.id);

    socket.on('disconnect', function () {
      console.log("--> Disconnected - Server: " + socket.id) 	//in ra màn hình console cho vui

    })
  });

